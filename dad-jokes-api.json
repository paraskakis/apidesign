{
  "openapi": "3.1.0",
  "info": {
    "title": "Dad Jokes API",
    "version": "1.0.0",
    "description": "An API for managing a collection of hilarious dad jokes.",
    "contact": {
      "name": "API Support",
      "url": "https://example.com/support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Jokes",
      "description": "Operations related to dad jokes"
    }
  ],
  "paths": {
    "/jokes": {
      "get": {
        "tags": [
          "Jokes"
        ],
        "summary": "List all dad jokes",
        "description": "Retrieves a paginated list of dad jokes.",
        "operationId": "listJokes",
        "parameters": [
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/OffsetParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of jokes.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Joke"
                  }
                },
                "example": [
                  {
                    "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                    "text": "Why don't scientists trust atoms? Because they make up everything!"
                  },
                  {
                    "id": "a8a3b8f0-9f9f-4b1a-9e6e-e7c8a7b6e5c4",
                    "text": "I told my wife she was drawing her eyebrows too high. She looked surprised."
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Jokes"
        ],
        "summary": "Create a new dad joke",
        "description": "Adds a new dad joke to the collection.",
        "operationId": "createJoke",
        "requestBody": {
          "description": "The joke to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JokeInput"
              },
              "example": {
                "text": "What do you call a lazy kangaroo? Pouch potato."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Joke created successfully.",
            "headers": {
              "Location": {
                "description": "The URL of the newly created joke.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "https://api.example.com/v1/jokes/f8a3b8f0-9f9f-4b1a-9e6e-e7c8a7b6e5c5"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Joke"
                },
                "example": {
                  "id": "f8a3b8f0-9f9f-4b1a-9e6e-e7c8a7b6e5c5",
                  "text": "What do you call a lazy kangaroo? Pouch potato."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/jokes/{jokeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/JokeIdParam"
        }
      ],
      "get": {
        "tags": [
          "Jokes"
        ],
        "summary": "Get a specific dad joke",
        "description": "Retrieves a single dad joke by its unique ID.",
        "operationId": "getJokeById",
        "responses": {
          "200": {
            "description": "The requested joke.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Joke"
                },
                "example": {
                  "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "text": "Why don't scientists trust atoms? Because they make up everything!"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Jokes"
        ],
        "summary": "Update a dad joke",
        "description": "Replaces an existing dad joke with new data.",
        "operationId": "updateJoke",
        "requestBody": {
          "description": "The updated joke data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JokeInput"
              },
              "example": {
                "text": "Why did the scarecrow win an award? Because he was outstanding in his field!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Joke updated successfully.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Joke"
                },
                "example": {
                  "id": "d290f1ee-6c54-4b01-90e6-d701748f0851",
                  "text": "Why did the scarecrow win an award? Because he was outstanding in his field!"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Jokes"
        ],
        "summary": "Delete a dad joke",
        "description": "Removes a dad joke from the collection.",
        "operationId": "deleteJoke",
        "responses": {
          "204": {
            "description": "Joke deleted successfully. No content returned.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "Retry-After": {
                "$ref": "#/components/headers/Retry-After"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Joke": {
        "type": "object",
        "description": "Represents a dad joke resource.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the joke.",
            "readOnly": true,
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "text": {
            "type": "string",
            "description": "The text content of the dad joke.",
            "example": "Why don't scientists trust atoms? Because they make up everything!"
          }
        },
        "required": [
          "id",
          "text"
        ],
        "example": {
          "id": "a8a3b8f0-9f9f-4b1a-9e6e-e7c8a7b6e5c4",
          "text": "I told my wife she was drawing her eyebrows too high. She looked surprised."
        }
      },
      "JokeInput": {
        "type": "object",
        "description": "Data required to create or update a joke.",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text content of the dad joke.",
            "example": "What do you call a lazy kangaroo? Pouch potato."
          }
        },
        "required": [
          "text"
        ],
        "example": {
          "text": "Why did the bicycle fall over? Because it was two tired!"
        }
      },
      "ProblemDetails": {
        "type": "object",
        "description": "Problem Details for HTTP APIs (RFC 9457)",
        "properties": {
          "type": {
            "type": "string",
            "format": "uri",
            "description": "A URI reference that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type.",
            "default": "about:blank",
            "example": "https://example.com/probs/validation-error"
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.",
            "example": "Validation Error"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code generated by the origin server for this occurrence of the problem.",
            "minimum": 100,
            "maximum": 599,
            "example": 400
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "The 'text' field is required and cannot be empty."
          },
          "instance": {
            "type": "string",
            "format": "uri-relative",
            "description": "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
            "example": "/jokes/f8a3b8f0-9f9f-4b1a-9e6e-e7c8a7b6e5c5"
          }
        },
        "example": {
          "type": "https://example.com/probs/out-of-credit",
          "title": "You do not have enough credit.",
          "status": 403,
          "detail": "Your current balance is 30, but that costs 50.",
          "instance": "/account/12345/msgs/abc"
        }
      }
    },
    "parameters": {
      "JokeIdParam": {
        "name": "jokeId",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the joke.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "required": false,
        "description": "Maximum number of items to return.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        },
        "example": 20
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "required": false,
        "description": "Number of items to skip before starting to collect the result set.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "default": 0
        },
        "example": 0
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/X-RateLimit-Limit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/X-RateLimit-Remaining"
          },
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "example": {
              "type": "https://example.com/probs/not-found",
              "title": "Resource Not Found",
              "status": 404,
              "detail": "The joke with the specified ID does not exist.",
              "instance": "/jokes/invalid-uuid-or-id"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication information is missing or invalid.",
        "headers": {
          "WWW-Authenticate": {
            "description": "Indicates the authentication scheme that should be used.",
            "schema": {
              "type": "string"
            },
            "example": "ApiKey realm=\"DadJokes API\""
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/X-RateLimit-Limit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/X-RateLimit-Remaining"
          },
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "example": {
              "type": "https://example.com/probs/unauthorized",
              "title": "Unauthorized",
              "status": 401,
              "detail": "Valid API key is required for this operation."
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request syntax is invalid or request body validation failed.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/X-RateLimit-Limit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/X-RateLimit-Remaining"
          },
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "example": {
              "type": "https://example.com/probs/bad-request",
              "title": "Bad Request",
              "status": 400,
              "detail": "Request body must contain a non-empty 'text' field."
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "The user has sent too many requests in a given amount of time ('rate limiting').",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/X-RateLimit-Limit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/X-RateLimit-Remaining"
          },
          "Retry-After": {
            "$ref": "#/components/headers/Retry-After"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "example": {
              "type": "https://example.com/probs/rate-limit-exceeded",
              "title": "Rate Limit Exceeded",
              "status": 429,
              "detail": "You have exceeded the request rate limit. Please try again later."
            }
          }
        }
      },
      "InternalServerError": {
        "description": "An unexpected error occurred on the server.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "example": {
              "type": "https://example.com/probs/internal-error",
              "title": "Internal Server Error",
              "status": 500,
              "detail": "An unexpected error occurred while processing your request."
            }
          }
        }
      }
    },
    "headers": {
      "X-RateLimit-Limit": {
        "description": "The maximum number of requests allowed in the current time window.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 1000
      },
      "X-RateLimit-Remaining": {
        "description": "The number of requests remaining in the current time window.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 999
      },
      "Retry-After": {
        "description": "The number of seconds to wait before making another request when the rate limit has been exceeded.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 60
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API Key needed to access the endpoints."
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
